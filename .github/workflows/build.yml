name: Chroma Server Image

on:
  workflow_dispatch:
    inputs:
      chroma_version:
        description: 'Chroma version to use for the image'
        required: true
        default: '0.6.3'
      latest:
        description: 'Whether to use the latest tag'
        required: false
        default: 'false'

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  GHCR_IMAGE_NAME: ${{ github.repository }}/chroma
  DOCKERHUB_IMAGE_NAME: amikos/chroma
  AWS_REGION : "eu-west-1"
  PYTHON_ALPINE_BASE: "python@${{ vars.PYTHON_ALPINE_DIGEST }}"
  PYTHON_BOOKWORM_BASE: "python@${{ vars.PYTHON_BOOKWORM_DIGEST }}"

permissions:
    id-token: write   # This is required for requesting the JWT
    contents: read
    packages: write

jobs:

  build:
    name: ${{ matrix.base }} Chroma Server Image
    strategy:
      fail-fast: false
      matrix:
        base: ["bookworm", "alpine"]
    runs-on: ubuntu-24.04-arm
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Chroma repository
        uses: actions/checkout@v4
        with:
          repository: chroma-core/chroma
          path: chroma
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          ref: ${{ inputs.chroma_version }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::531530523245:role/github-oidc
          role-session-name: chroma-images-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.0

      - name: Set Python Base Digest
        id: set-digest
        run: |
          if [ "${{ matrix.base }}" = "alpine" ]; then
            echo "PYTHON_BASE_DIGEST=${{ env.PYTHON_ALPINE_DIGEST }}" >> $GITHUB_ENV
          else
            echo "PYTHON_BASE_DIGEST=${{ env.PYTHON_BOOKWORM_DIGEST }}" >> $GITHUB_ENV
          fi
          # Debug output
          echo "Selected digest for ${{ matrix.base }}: ${{ env.PYTHON_BASE_DIGEST }}"

      - name: Configure
        run: |
          set -e
          cp common/log_config.yaml chroma/log_config.yaml
          cp common/docker_entrypoint.sh chroma/docker_entrypoint.sh
          rm -rf chroma/chromadb/utils/embedding_functions
          cp common/embedding_functions.py chroma/chromadb/utils/embedding_functions.py
          cp common/.dockerignore chroma/.dockerignore
          cp ${{ matrix.base }}/Dockerfile.${{ matrix.base }} chroma/Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=semver,pattern=${{ inputs.chroma_version }}-${{ matrix.base }}
            type=raw,value=${{ inputs.chroma_version }}-${{ matrix.base }}
            type=raw,value=latest-${{ matrix.base }},enable=${{ inputs.latest == 'true' }}
            type=raw,value=latest,enable=${{ inputs.latest == 'true' && matrix.base == 'bookworm' }}
            type=sha,format=long

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./chroma
          push: false
          load: true
          tags: local-test-image:${{ matrix.base }}
          build-args: |
             PYTHON_BASE_DIGEST=${{ env.PYTHON_BASE_DIGEST }}

      - name: Test
        id: test
        #skip this step
        if: false
        shell: bash
        run: |
          set -e
          export FIRST_TAG="local-test-image:${{ matrix.base }}"
          export CHROMA_PORT=${{ env.CHROMA_PORT }}
          cd chroma && pip install -r requirements.txt && pip install -r requirements_dev.txt && cd ..
          bash bin/integration-test.sh ${{ env.TESTS }}
        env:
          CHROMA_PORT: 8000
          TESTS: "--ignore-glob 'chromadb/test/property/*' --ignore='chromadb/test/test_cli.py' --ignore-glob 'chromadb/test/distributed/*' --ignore='chromadb/test/auth/test_simple_rbac_authz.py' --ignore='chromadb/test/ef/' --ignore='chromadb/test/db' --ignore='chromadb/test/segment/distributed' --ignore='chromadb/test/test_logservice.py' --ignore='chromadb/test/proto' --ignore='chromadb/test/auth/'"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: local-test-image:${{ matrix.base }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Set up Docker Buildx for push
        if: success()
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: success()
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Final Image
        if: success()
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./chroma
          push: true
          platforms: linux/amd64,linux/arm64
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
             PYTHON_BASE_DIGEST=${{ env.PYTHON_BASE_DIGEST }}

      - name: Get image refs
        id: image-ref
        run: |
          set -e
          # Get the first tag for each registry
          GHCR_TAG="$(echo '${{ steps.meta.outputs.tags }}' | grep '^ghcr.io' | head -n 1)"
          DOCKERHUB_TAG="$(echo '${{ steps.meta.outputs.tags }}' | grep '^docker.io' | head -n 1)"
          echo "ghcr-ref=${GHCR_TAG}@${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT
          echo "dockerhub-ref=${DOCKERHUB_TAG}@${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Run Trivy SBOM for GHCR
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-ref.outputs.ghcr-ref }}
          format: 'cyclonedx'
          output: 'chroma.ghcr.cdx.json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy SBOM for Docker Hub
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-ref.outputs.dockerhub-ref }}
          format: 'cyclonedx'
          output: 'chroma.dockerhub.cdx.json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy Vulnerability Scan for GHCR
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-ref.outputs.ghcr-ref }}
          format: 'cosign-vuln'
          output: 'chroma.ghcr.vuln.json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy Vulnerability Scan for Docker Hub
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-ref.outputs.dockerhub-ref }}
          format: 'cosign-vuln'
          output: 'chroma.dockerhub.vuln.json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Sign images with a key
        run: |
          set -e
          export AWS_REGION=${{ env.AWS_REGION }}
          # Sign GHCR images with GHCR artifacts
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | grep '^ghcr.io'); do
            cosign sign -y --key ${COSIGN_PUBLIC_KEY} "${tag}@${{ steps.build-and-push.outputs.digest }}"
            cosign attest -y --key ${COSIGN_PUBLIC_KEY} --type cyclonedx --predicate chroma.ghcr.cdx.json "${tag}@${{ steps.build-and-push.outputs.digest }}"
            cosign attest -y --key ${COSIGN_PUBLIC_KEY} --type vuln --predicate chroma.ghcr.vuln.json "${tag}@${{ steps.build-and-push.outputs.digest }}"
          done
          # Sign Docker Hub images with Docker Hub artifacts
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | grep '^docker.io'); do
            cosign sign -y --key ${COSIGN_PUBLIC_KEY} "${tag}@${{ steps.build-and-push.outputs.digest }}"
            cosign attest -y --key ${COSIGN_PUBLIC_KEY} --type cyclonedx --predicate chroma.dockerhub.cdx.json "${tag}@${{ steps.build-and-push.outputs.digest }}"
            cosign attest -y --key ${COSIGN_PUBLIC_KEY} --type vuln --predicate chroma.dockerhub.vuln.json "${tag}@${{ steps.build-and-push.outputs.digest }}"
          done
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.AWS_KMS_OSS_IMAGE_SIGNING_KEY }}

name: Ubuntu arm64 Chroma Server Image

on:
  workflow_dispatch:
    inputs:
      chroma_version:
        description: 'Chroma version to use for the image'
        required: true
        default: '0.6.3'
      latest:
        description: 'Whether to use the latest tag'
        required: false
        default: 'false'


env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  GHCR_IMAGE_NAME: ${{ github.repository }}/chroma
  DOCKERHUB_IMAGE_NAME: amikos/chroma
  AWS_REGION : "eu-west-1"

permissions:
    id-token: write   # This is required for requesting the JWT
    contents: read
    packages: write

jobs:

  build:
    name: ${{ matrix.base }} Chroma Server Image
    strategy:
      fail-fast: false
      matrix:
        base: ["bookworm", "alpine"]
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Chroma repository
        uses: actions/checkout@v4
        with:
          repository: chroma-core/chroma
          path: chroma
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          ref: ${{ inputs.chroma_version }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::531530523245:role/github-oidc
          role-session-name: chroma-images-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.0

      - name: Configure
        run: |
          set -e
          cp common/log_config.yaml chroma/log_config.yaml
          cp common/docker_entrypoint.sh chroma/docker_entrypoint.sh
          rm -rf chroma/chromadb/utils/embedding_functions
          cp common/embedding_functions.py chroma/chromadb/utils/embedding_functions.py
          cp common/.dockerignore chroma/.dockerignore
          cp ${{ matrix.base }}/Dockerfile.${{ matrix.base }} chroma/Dockerfile

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=semver,pattern=${{ inputs.chroma_version }}-${{ matrix.base }}
            type=raw,value=${{ inputs.chroma_version }}-${{ matrix.base }}
            type=raw,value=latest-${{ matrix.base }},enable=${{ inputs.latest == 'true' }}
            type=raw,value=latest,enable=${{ inputs.latest == 'true' && matrix.base == 'bookworm' }}
            type=sha,format=long

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./chroma
          push: false
          load: true
          platforms: linux/arm64, linux/amd64
          tags: local-test-image:${{ matrix.base }}



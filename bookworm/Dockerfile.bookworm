ARG PYTHON_BASE_DIGEST=sha256:34656cd90456349040784165b9decccbcee4de66f3ead0a1168ba893455afd1e
FROM --platform=$TARGETPLATFORM python@${PYTHON_BASE_DIGEST} AS builder

# Controls whether to rebuild hnswlib from source
ARG REBUILD_HNSWLIB

# Set environment variables
ENV PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

RUN apt-get update --fix-missing && apt-get install -y --fix-missing \
    build-essential \
    gcc \
    g++ \
    cmake \
    autoconf \
    python3-dev \
    unzip \
    curl \
    make \
    binutils \
    rustc \
    cargo && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir /install

WORKDIR /chroma

COPY . /chroma/
RUN pip3 install --no-cache --upgrade pip setuptools wheel

# Remove unnecessary packages from requirements.txt
RUN sed -i \
    -e '/onnxruntime/d' \
    -e '/tokenizers/d' \
    requirements.txt

RUN --mount=type=cache,target=/root/.cache/pip pip install --no-cache-dir --upgrade --prefix="/install" -r requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip if [ "$REBUILD_HNSWLIB" = "true" ]; then pip install --no-cache-dir --no-binary :all: --force-reinstall --prefix="/install" chroma-hnswlib; fi

FROM --platform=$TARGETPLATFORM python@${PYTHON_BASE_DIGEST} AS final

WORKDIR /chroma

COPY --from=builder /install /usr/local
COPY --from=builder /chroma/ /chroma/
COPY ./log_config.yaml /chroma/log_config.yaml

RUN apt update && apt install -y curl sqlite3 && \
    groupadd -g 1000 chroma && \
    useradd -u 1000 -g chroma -m -s /bin/bash chroma && \ 
    mv /chroma/docker_entrypoint.sh /docker_entrypoint.sh && \
    chmod +x /docker_entrypoint.sh && \
    chown -R chroma:chroma /chroma && \
    chmod -R 755 /chroma

USER chroma

EXPOSE 8000

# Set healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v2/heartbeat || exit 1

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    ANONYMIZED_TELEMETRY=false \
    CHROMA_LOG_CONFIG="/chroma/log_config.yaml" \
    CHROMA_TIMEOUT_KEEP_ALIVE=30 \
    CHROMA_HOST_ADDR="0.0.0.0" \
    ROOT_LOG_LEVEL=WARN \
    CHROMA_LOG_LEVEL=DEBUG \
    UVICORN_LOG_LEVEL_UVICORN=INFO

ENTRYPOINT ["/docker_entrypoint.sh"]
CMD [ "--workers 1 --host ${CHROMA_HOST_ADDR} --port 8000 --proxy-headers --log-config ${CHROMA_LOG_CONFIG} --timeout-keep-alive ${CHROMA_TIMEOUT_KEEP_ALIVE}"]
